###Fonction factorielle (version itérative)
var n : integer #variable entière globale

f(n : integer) : integer #déclaration d'une fonction f, prenant un paramètre entier n et calculant n!
var i : integer #variable entière locale à f
if n = 0 then
  f := 1
else{
  f := 1;
  i := 1;
  while i <= n do{
    f := f * i;
    i := i + 1
  }
}

n := read(); #lire la valeur de n depuis l'entrée standard
write(f(n)) #afficher n! sur la sortie standard

###Fonction factorielle (version récursive)
recFact(n : integer) : integer
if n = 0 then
  recFact := 1
else{
  recFact := n * recFact(n-1)
}

###Fonction qui teste si un entier est un carré
carre(n : integer) : boolean
var i : integer
carre := false;
if n = 0 or n = 1 then
  carre := true
else{
  i := 1;
  while i*i <= n do{
    if n = i*i then
      carre := true
    else{
      i := i + 1
    }
  }
}

###Programme qui alloue un tableau d'entiers d'une taille demandée à l'utilisateur et appelle une procédure pour l'initialiser
var n : integer #taille du tableau à demander à l'utilisateur

initialiser(tab : array of integer taille : integer) #procédure pour initialiser un tableau d'entiers "tab" de taille "taille"
var i : integer
i := 0;
while i < taille do{
  tab[i] := 0;
  i := i + 1
}

write("Veuillez saisir la taille de votre tableau : ");
n := read();
initialiser(n)

###Fonction qui teste si tous les éléments d'un tableau d'entiers passé en paramètre sont positifs
positif(tab : array of integer taille : integer)
var i : integer
i := 0;
positif := true;
while i < taille do{
  if tab[i] < 0 then
    positif := false;
    i := taille
  else{
    i := i + 1
  }
}
